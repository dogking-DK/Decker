#version 460
#extension GL_EXT_mesh_shader : require

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// 直接输出 point：每个线程 1 顶点 + 1 原语
layout(max_vertices   = 128,
       max_primitives = 128,
       points) out;

struct GPUPoint { vec4 pos; vec4 val; };

layout(set=0, binding=1) readonly buffer PointsSSBO { GPUPoint pts[]; };

layout(set=0, binding=0) uniform CameraData {
    mat4 view;
    mat4 proj;
    mat4 viewProj;
    vec4 eye;
} uCam;

layout(set=0, binding=2) uniform DrawParams {
    uint  count;
    float pointPixelSize; // gl_PointSize（像素）
    float vmin;
    float vmax;
} uParams;

layout(push_constant) uniform PushConstantData {
    mat4 modelMatrix;
    float size;
} pushC;

layout(location=0) out vec3 outColor[];

// 简易 colormap
vec3 turbo(float t){
    t = clamp(t, 0.0, 1.0);
    return vec3(clamp(1.5*t,0,1),
                clamp(1.5*(t-0.33),0,1),
                clamp(1.5*(0.66-t),0,1));
}

void main()
{
    uint base = gl_WorkGroupID.x * gl_WorkGroupSize.x;
    uint idx  = base + gl_LocalInvocationID.x;
    uint N    = uParams.count;

    if (gl_LocalInvocationID.x == 0u)
        SetMeshOutputsEXT(gl_WorkGroupSize.x, gl_WorkGroupSize.x);

    if (idx >= N) {
        // 退化：放到裁剪外
        gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position = vec4(0,0,-1,0);
        gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_PointSize = 0.0;
        outColor[gl_LocalInvocationID.x] = vec3(0);
        gl_PrimitivePointIndicesEXT[gl_LocalInvocationID.x] = gl_LocalInvocationID.x;
        return;
    }

    GPUPoint P = pts[idx];

    float t = (P.val.x - uParams.vmin) / max(uParams.vmax - uParams.vmin, 1e-6);
    vec3  col = turbo(t);

    // 写顶点 & 颜色
    gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position  = uCam.viewProj * vec4(P.pos.xyz, 1.0);
    gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_PointSize = max(uParams.pointPixelSize, 1.0);
    outColor[gl_LocalInvocationID.x] = col;

    // 每线程一个 point primitive
    gl_PrimitivePointIndicesEXT[gl_LocalInvocationID.x] = gl_LocalInvocationID.x;
}
